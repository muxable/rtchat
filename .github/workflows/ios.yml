name: Release to App Store

on:
  push:
    paths:
      - "ios/**"
      - "assets/**"
      - "lib/**"
      - "pubspec.lock"
      - "pubspec.yaml"
    branches:
      - main
  release:
    types: [released]
  workflow_dispatch:
    
jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - uses: subosito/flutter-action@v1
      - run: flutter pub get
      - run: flutter build ipa --release --build-name=${{ steps.get-latest-tag.outputs.tag }} --export-options-plist=ios/ExportOptions.plist

      - run: mkdir whatsnew
      - run: echo "${{ github.event.release.body }}" > whatsnew/whatsnew-en-US
        if: github.event_name == 'release'

      - uses: actions/upload-artifact@v2
        with:
         name: release.ipa
         path: build/ios/ipa/RealtimeChat.ipa

      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install codemagic-cli-tools

      - env:
          ISSUER_ID: 863d4663-9217-4c36-9caa-e7b2201ec4f1
          KEY_ID: SUR6CT925Z
          PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        if: github.event_name != 'release'
        run: |
          app-store-connect publish
            --path=build/ios/ipa/RealtimeChat.ipa
            --whats-new=@file:whatsnew/whatsnew-en-US
            --issuer-id=@env:ISSUER_ID
            --key-id=@env:KEY_ID
            --private-key=@env:PRIVATE_KEY
            --testflight

      - env:
          ISSUER_ID: 863d4663-9217-4c36-9caa-e7b2201ec4f1
          KEY_ID: SUR6CT925Z
          PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        if: github.event_name == 'release'
        run: |
          app-store-connect publish
            --path=build/ios/ipa/RealtimeChat.ipa
            --whats-new=@file:whatsnew/whatsnew-en-US
            --issuer-id=@env:ISSUER_ID
            --key-id=@env:KEY_ID
            --private-key=@env:PRIVATE_KEY
            --app-store

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision